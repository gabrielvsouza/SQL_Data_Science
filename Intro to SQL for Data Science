The role of a data scientist is to turn raw data into actionable insights. 
Much of the world's raw data–from electronic medical records to customer transaction histories–lives in organized collections 
of tables called relational databases. Therefore, to be an effective data scientist, you must know how to wrangle and extract 
data from these databases using a language called SQL (pronounced ess-cue-ell, or sequel). 
This course teaches syntax in SQL shared by many types of databases, such as PostgreSQL, MySQL, SQL Server, and Oracle.

Onboarding | Tables
For this course, you'll be using a database containing information on almost 5000 films.
https://www.kaggle.com/carolzhangdc/imdb-5000-movie-dataset


Beginning your SQL journey

Let's get straight into it.
SQL, which stands for Structured Query Language, is a language for interacting with data stored in something called a 
relational database.
You can think of a relational database as a collection of tables. A table is just a set of rows and columns, 
like a spreadsheet, which represents exactly one type of entity. For example, a table might represent employees in a 
company or purchases made, but not both.
Each row, or record, of a table contains information about a single entity. For example, in a table representing employees,
each row represents a single person. Each column, or field, of a table contains a single attribute for all rows in the table. For example, in a table representing employees, we might have a column containing first and last names for all employees.
The table of employees might look something like this:

id	name	  age	nationality
1	  Jessica	22	Ireland
2	  Gabriel	48	France
3	  Laura	  36	USA

How many fields does the employees table above contain?
4

SELECTing single columns
While SQL can be used to create and modify databases, the focus of this course will be querying databases. 
A query is a request for data from a database table (or combination of tables). Querying is an essential skill for a 
data scientist, since the data you need for your analyses will often live in databases.
In SQL, you can select data from a table using a SELECT statement. For example, the following query selects the name 
column from the people table:
  SELECT name
  FROM people;
In this query, SELECT and FROM are called keywords. In SQL, keywords are not case-sensitive, which means you can write 
the same query as:
  select name
  from people;
That said, it's good practice to make SQL keywords uppercase to distinguish them from other parts of your query, 
like column and table names.
It's also good practice (but not necessary for the exercises in this course) to include a semicolon at the end of your query. This tells SQL where the end of your query is!
Remember, you can see the results of executing your query in the query result tab to the right!
Select the title column from the films table.
  SELECT title FROM films

SELECTing multiple columns
Well done! Now you know how to select single columns.
In the real world, you will often want to select multiple columns. Luckily, SQL makes this really easy. 
To select multiple columns from a table, simply separate the column names with commas!
For example, this query selects two columns, name and birthdate, from the people table:
  SELECT name, birthdate
  FROM people;
Sometimes, you may want to select all columns from a table. Typing out every column name would be a pain, so there's 
a handy shortcut:
  SELECT *
  FROM people;
If you only want to return a certain number of results, you can use the LIMIT keyword to limit the number of rows returned:
  SELECT *
  FROM people
  LIMIT 10;
Before getting started with the instructions below, check out the column names in the films table by clicking on the 
films tab to the right!

SELECT DISTINCT
Often your results will include many duplicate values. If you want to select all the unique values from a column, 
you can use the DISTINCT keyword.
This might be useful if, for example, you're interested in knowing which languages are represented in the films table:
  SELECT DISTINCT language
  FROM films;

Learning to COUNT
What if you want to count the number of employees in your employees table? The COUNT statement lets you do this by
returning the number of rows in one or more columns.
For example, this code gives the number of rows in the people table:
  SELECT COUNT(*)
  FROM people;
How many records are contained in the reviews table?

Practice with COUNT
As you've seen, COUNT(*) tells you how many rows are in a table. However, if you want to count the number of non-missing 
values in a particular column, you can call COUNT on just that column.
For example, to count the number of birth dates present in the people table:
  SELECT COUNT(birthdate)
  FROM people;
It's also common to combine COUNT with DISTINCT to count the number of distinct values in a column.
For example, this query counts the number of distinct birth dates contained in the people table:
  SELECT COUNT(DISTINCT birthdate)
  FROM people;


Filtering results
You now know how to select columns and perform basic counts. This chapter will focus on filtering your results.
In SQL, the WHERE keyword allows you to filter based on both text and numeric values in a table. There are a few different comparison operators you can use:
  = equal
  <> not equal
  < less than
  > greater than
  <= less than or equal to
  >= greater than or equal to
For example, you can filter text records such as title. The following code returns all films with the title 'Metropolis':
  SELECT title
  FROM films
  WHERE title = 'Metropolis';
Notice that the WHERE clause always comes after the FROM statement!
Note that in this course we will use <> and not != for the not equal operator, as per the SQL standard.

Simple filtering of numeric values
As you learned in the previous exercise, the WHERE clause can also be used to filter numeric records, such as years or ages.
For example, the following query selects all details for films with a budget over ten thousand dollars:
  SELECT *
  FROM films
  WHERE budget > 10000;
Now it's your turn to use the WHERE clause to filter numeric values!
Get the number of films released before 2000.
  SELECT COUNT(*)
  FROM films
  WHERE release_year < 2000

Simple filtering of text
Remember, the WHERE clause can also be used to filter text results, such as names or countries.
For example, this query gets the titles of all films which were filmed in China:
  SELECT title
  FROM films
  WHERE country = 'China';
Now it's your turn to practice using WHERE with text values!
Important: in PostgreSQL (the version of SQL we're using), you must use single quotes with WHERE.


WHERE AND
Often, you'll want to select data based on multiple conditions. You can build up your WHERE queries by combining multiple
conditions with the AND keyword.
For example,
  SELECT title
  FROM films
  WHERE release_year > 1994
  AND release_year < 2000;
gives you the titles of films released between 1994 and 2000.
Note that you need to specify the column name separately for every AND condition, so the following would be invalid:
  SELECT title
  FROM films
  WHERE release_year > 1994 AND < 2000;
You can add as many AND conditions as you need!

WHERE AND OR
What if you want to select rows based on multiple conditions where some but not all of the conditions need to be met? 
For this, SQL has the OR operator.
For example, the following returns all films released in either 1994 or 2000:
  SELECT title
  FROM films
  WHERE release_year = 1994
  OR release_year = 2000;
Note that you need to specify the column for every OR condition, so the following is invalid:
  SELECT title
  FROM films
  WHERE release_year = 1994 OR 2000;
When combining AND and OR, be sure to enclose the individual clauses in parentheses, like so:
  SELECT title
  FROM films
  WHERE (release_year = 1994 OR release_year = 1995)
  AND (certification = 'PG' OR certification = 'R');
 Otherwise, due to SQL's precedence rules, you may not get the results you're expecting!
  SELECT title, release_year
  FROM films
  WHERE release_year >= 1990 
  AND release_year < 2000
  AND (language = 'French' OR language = 'Spanish')
  AND gross > 2000000

BETWEEN
As you've learned, you can use the following query to get titles of all films released in and between 1994 and 2000:
  SELECT title
  FROM films
  WHERE release_year >= 1994
  AND release_year <= 2000;
Checking for ranges like this is very common, so in SQL the BETWEEN keyword provides a useful shorthand for filtering values within a specified range. This query is equivalent to the one above:
  SELECT title
  FROM films
  WHERE release_year
  BETWEEN 1994 AND 2000;
It's important to remember that BETWEEN is inclusive, meaning the beginning and end values are included in the results!
  SELECT title, release_year
  FROM films
  WHERE release_year BETWEEN 1990 AND 2000
  AND budget > 100000000
  AND (language = 'French' OR language = 'Spanish')

BETWEEN (2)
Similar to the WHERE clause, the BETWEEN clause can be used with multiple AND and OR operators, so you can build up your 
queries and make them even more powerful!
For example, suppose we have a table called kids. We can get the names of all kids between the ages of 2 and 12 from 
the United States:
  SELECT name
  FROM kids
  WHERE age BETWEEN 2 AND 12
  AND nationality = 'USA';

WHERE IN
As you've seen, WHERE is very useful for filtering results. However, if you want to filter based on many conditions, 
WHERE can get unwieldy. For example:
  SELECT name
  FROM kids
  WHERE age = 2
  OR age = 4
  OR age = 6
  OR age = 8
  OR age = 10;
Enter the IN operator! The IN operator allows you to specify multiple values in a WHERE clause, 
making it easier and quicker to specify multiple OR conditions! Neat, right?
So, the above example would become simply:
  SELECT name
  FROM kids
  WHERE age IN (2, 4, 6, 8, 10);
#
  SELECT title, language
  FROM films
  WHERE language IN ('French', 'Spanish', 'English');
#

Introduction to NULL and IS NULL
In SQL, NULL represents a missing or unknown value. You can check for NULL values using the expression IS NULL. 
For example, to count the number of missing birth dates in the people table:
  SELECT COUNT(*)
  FROM people
  WHERE birthdate IS NULL;
As you can see, IS NULL is useful when combined with WHERE to figure out what data you're missing.
Sometimes, you'll want to filter out missing values so you only get results which are not NULL. To do this, 
you can use the IS NOT NULL operator.
For example, this query gives the names of all people whose birth dates are not missing in the people table.
  SELECT name
  FROM people
  WHERE birthdate IS NOT NULL;
Get the names of people who are still alive, i.e. whose death date is missing.
  SELECT name
  FROM people
  WHERE deathdate IS NULL;
Get the title of every film which doesn't have a budget associated with it.
  SELECT title
  FROM films
  WHERE budget IS NULL;
Get the number of films which don't have a language associated with them.
  SELECT count(*)
  FROM films
  WHERE language IS NULL;

LIKE and NOT LIKE
As you've seen, the WHERE clause can be used to filter text data. However, so far you've only been able to filter 
by specifying the exact text you're interested in. In the real world, often you'll want to search for a pattern 
rather than a specific text string.
In SQL, the LIKE operator can be used in a WHERE clause to search for a pattern in a column. 
To accomplish this, you use something called a wildcard as a placeholder for some other values. 
There are two wildcards you can use with LIKE:
The % wildcard will match zero, one, or many characters in text. 
For example, the following query matches companies like 'Data', 'DataC' 'DataCamp', 'DataMind', and so on:
  SELECT name
  FROM companies
  WHERE name LIKE 'Data%';
The _ wildcard will match a single character. For example, the following query matches companies like
'DataCamp', 'DataComp', and so on:
  SELECT name
  FROM companies
  WHERE name LIKE 'DataC_mp';
You can also use the NOT LIKE operator to find records that don't match the pattern you specify.
Get the names of all people whose names begin with 'B'. The pattern you need is 'B%'
  SELECT name
  FROM people
  WHERE name LIKE 'B%';
Get the names of people whose names have 'r' as the second letter. The pattern you need is '_r%'
  SELECT name
  FROM people
  WHERE name LIKE '_r%';
Get the names of people whose names don't start with A. The pattern you need is 'A%'















































