An SQL join clause - corresponding to a join operation in relational algebra - 
combines columns from one or more tables in a relational database. 
It creates a set that can be saved as a table or used as it is. 
A JOIN is a means for combining columns from one (self-join) or more tables by using values common to each. 
ANSI-standard SQL specifies five types of JOIN: INNER, LEFT OUTER, RIGHT OUTER, FULL OUTER and CROSS. 
As a special case, a table (base table, view, or joined table) can JOIN to itself in a self-join.

A programmer declares a JOIN statement to identify rows for joining. 
If the evaluated predicate is true, the combined row is then produced in the expected format, a row set or a temporary table.

An inner join requires each row in the two joined tables to have matching column values, 
and is a commonly used join operation in applications but should not be assumed to be the best choice in all situations. 
Inner join creates a new result table by combining column values of two tables (A and B) based upon the join-predicate. 
The query compares each row of A with each row of B to find all pairs of rows that satisfy the join-predicate. 
When the join-predicate is satisfied by matching non-NULL values, 
column values for each matched pair of rows of A and B are combined into a result row.

INNER JOIN
-(SELF JOIN)
OUTER JOIN
-LEFT JOIN
-RIGHT JOIN
-FULL JOIN
CROSS JOIN
-(SEMI JOIN)
-(ANTI JOIN)

Inner join
PostgreSQL was mentioned in the slides but you'll find that these joins and the material here applies to different forms
of SQL as well.
Throughout this course, you'll be working with the countries database containing information about the most populous world
cities as well as country-level economic data, population data, and geographic data. 
This countries database also contains information on languages spoken in each country.
You can see the different tables in this database by clicking on the tabs on the bottom right below query.sql. 
Click through them to get a sense for the types of data that each table contains before you continue with the course!
Take note of the fields that appear to be shared across the tables.
Recall from the video the basic syntax for an INNER JOIN, here including all columns in both tables:
    SELECT *
    FROM left_table
    INNER JOIN right_table
    ON left_table.id = right_table.id;
You'll start off with a SELECT statement and then build up to an inner join with the cities and countries tables. 
Let's get to it!
1 Begin by selecting all columns from the cities table.
    SELECT * 
    FROM cities;
2 Inner join the cities table on the left to the countries table on the right, keeping all of the fields in both tables.
You should match the tables on the country_code field in cities and the code field in countries.
Do not alias your tables here or in the next step. Using cities and countries is fine for now.
    SELECT * 
    FROM cities
    INNER JOIN countries
    ON cities.country_code = countries.code;
3 Modify the SELECT statement to keep only the name of the city, the name of the country, 
and the name of the region the country resides in.
Recall from our Intro to SQL for Data Science course that you can alias fields using AS. 
Alias the name of the city AS city and the name of the country AS country.
    SELECT cities.name AS city, countries.name AS country, region
    FROM cities 
    INNER JOIN countries 
    ON cities.country_code = countries.code;


Inner join (2)
Instead of writing the full table name, you can use table aliasing as a shortcut. 
For tables you also use AS to add the alias immediately after the table name with a space. 
Check out the aliasing of cities and countries below.
    SELECT c1.name AS city, c2.name AS country
    FROM cities AS c1
    INNER JOIN countries AS c2
    ON c1.country_code = c2.code;
Notice that to select a field in your query that appears in multiple tables, 
you'll need to identify which table/table alias you're referring to by using a . in your SELECT statement.
You'll now explore a way to get data from both the countries and economies tables to examine the inflation rate for both 2010 and 2015.
Sometimes it's easier to write SQL code out of order: you write the SELECT statement after you've done the JOIN.
Join the tables countries (left) and economies (right) aliasing countries AS c and economies AS e.
Specify the field to match the tables ON.
From this join, SELECT:
c.code, aliased as country_code.
name, year, and inflation_rate, not aliased.
    -- 3. Select fields with aliases
    SELECT c.code AS country_code, name, year, inflation_rate
    FROM countries AS c
    -- 1. Join to economies (alias e)
    INNER JOIN economies AS e
    -- 2. Match on code
    ON c.code = e.code;


Inner join (3)
The ability to combine multiple joins in a single query is a powerful feature of SQL, e.g:
    SELECT *
    FROM left_table
      INNER JOIN right_table
        ON left_table.id = right_table.id
      INNER JOIN another_table
        ON left_table.id = another_table.id;
As you can see here it becomes tedious to continually write long table names in joins. 
This is when it becomes useful to alias each table using the first letter of its name (e.g. countries AS c)! 
It is standard practice to alias in this way and, if you choose to alias tables or are asked to specifically 
for an exercise in this course, you should follow this protocol.
Now, for each country, you want to get the country name, its region, and the fertility rate and unemployment rate
for both 2010 and 2015.
Note that results should work throughout this course with or without table aliasing unless specified differently.
1 Inner join countries (left) and populations (right) on the code and country_code fields respectively.
Alias countries AS c and populations AS p.
Select code, name, and region from countries and also select year and fertility_rate from populations (5 fields in total).
    -- 4. Select fields
    SELECT code, name, region, year, fertility_rate
      -- 1. From countries (alias as c)
    FROM countries AS c
      -- 2. Join with populations (as p)
    INNER JOIN populations AS p
        -- 3. Match on country code
    On c.code = p.country_code
2 Add an additional inner join with economies to your previous query by joining on code.
Include the unemployment_rate column that became available through joining with economies.
Note that year appears in both populations and economies, so you have to explicitly use e.year 
instead of year as you did before.
-- wrong way
    SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
      -- 1. From countries (alias as c)
      FROM countries AS c
      -- 2. Join to populations (as p)
      INNER JOIN populations AS p
        -- 3. Match on country code
        ON c.code = p.country_code
      -- 4. Join to economies (as e)
       INNER JOIN economies AS e
        -- 5. Match on country code
        ON c.code = e.code;
3 Scroll down the query result and take a look at the results for Albania from your previous query. 
Does something seem off to you?
The trouble with doing your last join on c.code = e.code and not also including year is that e.g. the 2010 
value for fertility_rate is also paired with the 2015 value for unemployment_rate.
Fix your previous query: in your last ON clause, use AND to add an additional joining condition. 
In addition to joining on code in c and e, also join on year in e and p.
-- right way
    SELECT c.code, c.name, c.region, p.fertility_rate, e.year, e.unemployment_rate
    FROM countries AS c
    INNER JOIN populations AS p
    ON c.code = p.country_code
    INNER JOIN economies AS e
    ON c.code = e.code
    AND p.year = e.year;


INNER JOIN via USING
Inner join with using
When joining tables with a common field name, e.g.
    SELECT *
    FROM countries
      INNER JOIN economies
        ON countries.code = economies.code
You can use USING as a shortcut:
    SELECT *
    FROM countries
      INNER JOIN economies
        USING(code)
You'll now explore how this can be done with the countries and languages tables.
Inner join countries on the left and languages on the right with USING(code).
Select the fields corresponding to:
country name AS country,
continent name,
language name AS language, and
whether or not the language is official.
Remember to alias your tables using the first letter of their names.
    SELECT c.name AS country, continent, l.name AS language, l.official
    FROM countries AS c
    INNER JOIN languages AS l
    USING (code);


Self-ish joins, just in CASE
Self-join
In this exercise, you'll use the populations table to perform a self-join to calculate the percentage increase 
in population from 2010 to 2015 for each country code!
Since you'll be joining the populations table to itself, you can alias populations as p1 and also populations as p2.
This is good practice whenever you are aliasing and your tables have the same first letter.
Note that you are required to alias the tables with self-joins.
Join populations with itself ON country_code.
Select the country_code from p1 and the size field from both p1 and p2. SQL won't allow same-named fields, 
so alias p1.size as size2010 and p2.size as size2015.
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON  p1.country_code = p2.country_code;
Notice from the result that for each country_code you have four entries laying out all combinations of 2010 and 2015.
Extend the ON in your query to include only those records where the p1.year (2010) matches with 
p2.year - 5 (2015 - 5 = 2010). This will omit the three entries per country_code that you aren't interested in.
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON p1.country_code = p2.country_code
        AND p1.year = p2.year - 5;
As you just saw, you can also use SQL to calculate values like p2.year - 5 for you. 
With two fields like size2010 and size2015, you may want to determine the percentage increase from one field to the next:
With two numeric fields A and B, the percentage growth from A to B can be calculated as (B−A)/A∗100.0.
Add a new field to SELECT, aliased as growth_perc, that calculates the percentage population growth from 2010 to 2015 
for each country, using p2.size and p1.size
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015,
           ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON p1.country_code = p2.country_code
        AND p1.year = p2.year - 5;

Case when and then
Often it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.
You can use CASE with WHEN, THEN, ELSE, and END to define a new grouping field.
Using the countries table, create a new field AS geosize_group that groups the countries into three groups:
If surface_area is greater than 2 million, geosize_group is 'large'.
If surface_area is greater than 350 thousand but not larger than 2 million, geosize_group is 'medium'.
Otherwise, geosize_group is 'small'.
    SELECT name, continent, code, surface_area,
        CASE 
            -- first case
            WHEN surface_area > 2000000 THEN 'large'
            -- second case
            WHEN surface_area > 350000 THEN 'medium'
            -- else clause + end
            ELSE 'small' 
        END AS geosize_group
    FROM countries;

Inner challenge
The table you created with the added geosize_group field has been loaded for you here with the name countries_plus. 
Observe the use of (and the placement of) the INTO command to create this countries_plus table:
    SELECT name, continent, code, surface_area,
        CASE WHEN surface_area > 2000000
                THEN 'large'
           WHEN surface_area > 350000
                THEN 'medium'
           ELSE 'small' END
           AS geosize_group
    INTO countries_plus
    FROM countries;
You will now explore the relationship between the size of a country in terms of surface area and in terms of population using grouping fields created with CASE.
By the end of this exercise, you'll be writing two queries back-to-back in a single script. You got this!
Using the populations table focused only for the year 2015, create a new field AS popsize_group to organize population size 
into
'large' (> 50 million),
'medium' (> 1 million), and
'small' groups.
Select only the country code, population size, and this new popsize_group as fields.
    SELECT country_code, size,
        CASE WHEN size > 50000000 THEN 'large'
            WHEN size > 1000000 THEN 'medium'
            ELSE 'small' END
            AS popsize_group
    FROM populations
    WHERE year = 2015;
Use INTO to save the result of the previous query as pop_plus. You can see an example of this in the countries_plus 
code in the assignment text. Make sure to include a ; at the end of your WHERE clause!
Then, include another query below your first query to display all the records in pop_plus using SELECT * FROM pop_plus; 
so that you generate results and this will display pop_plus in query result.
    SELECT country_code, size,
        CASE WHEN size > 50000000 THEN 'large'
            WHEN size > 1000000 THEN 'medium'
            ELSE 'small' END
            AS popsize_group
    INTO pop_plus
    FROM populations
    WHERE year = 2015;
    SELECT * FROM pop_plus;
Instructions 3/3
Keep the first query intact that creates pop_plus using INTO.
Remove the SELECT * FROM pop_plus; code and instead write a second query to join countries_plus AS c on the left with 
pop_plus AS p on the right matching on the country code fields.
Select the name, continent, geosize_group, and popsize_group fields.
Sort the data based on geosize_group, in ascending order so that large appears on top.
*/
        SELECT country_code, size,
            CASE WHEN size > 50000000 THEN 'large'
                WHEN size > 1000000 THEN 'medium'
                ELSE 'small' END
                AS popsize_group
        INTO pop_plus
        FROM populations
        WHERE year = 2015;

        SELECT c.name, c.continent, c.geosize_group, p.popsize_group
        FROM countries_plus as c
        INNER JOIN pop_plus as p
        ON c.code = p.country_code
        ORDER BY c.geosize_group


Union
Near query result to the right, you will see two new tables with names economies2010 and economies2015.
Instructions
Combine these two tables into one table containing all of the fields in economies2010. The economies table is also included for reference.
Sort this resulting single table by country code and then by year, both in ascending order.
        -- pick specified columns from 2010 table
        SELECT *
        -- 2010 table will be on top
        FROM economies2010
        -- which set theory clause?
        UNION
        -- pick specified columns from 2015 table
        SELECT *
        -- 2015 table on the bottom
        FROM economies2015
        -- order accordingly
        ORDER BY code, year;

Union (2)
UNION can also be used to determine all occurrences of a field across multiple tables. 
Try out this exercise with no starter code.
*/

/*
Instructions
Determine all (non-duplicated) country codes in either the cities or the currencies table. 
The result should be a table with only one field called country_code.
Sort by country_code in alphabetical order.
*/

        SELECT country_code
        FROM cities
        UNION
        SELECT code as country_code
        FROM currencies
        ORDER BY country_code

Union all
As you saw, duplicates were removed from the previous two exercises by using UNION.
To include duplicates, you can use UNION ALL.
Instructions
Determine all combinations (include duplicates) of country code and year that exist in either the economies or the populations tables. Order by code then year.
The result of the query should only have two columns/fields. Think about how many records this query should result in.
You'll use code very similar to this in your next exercise after the video. Make note of this code after completing it.
*/

        SELECT code, year
        FROM economies
        UNION ALL
        SELECT country_code, year
        FROM populations
        ORDER BY code, year;


INTERSECTional data scienceIntersect
Intersect
Repeat the previous UNION ALL exercise, this time looking at the records in common for country code and year for the economies and populations tables.
Instructions
Again, order by code and then by year, both in ascending order.
Note the number of records here (given at the bottom of query result) compared to the similar UNION ALL query result (814 records).
        SELECT code, year
        FROM economies
        INTERSECT
        SELECT country_code, year
        FROM populations
        ORDER BY code, year
  
Intersect (2)
As you think about major world cities and their corresponding country, you may ask which countries also have a city with the same name as their country name?
Instructions
Use INTERSECT to answer this question with countries and cities!
*/

        SELECT name
        FROM countries
        INTERSECT
        SELECT name
        FROM cities;
Hong Kong is part of China, but it appears separately here because it has its own ISO country code. Depending upon your analysis, treating Hong Kong separately could be useful or a mistake. Always check your dataset closely before you perform an analysis!


EXCEPTional
Except
Get the names of cities in cities which are not noted as capital cities in countries as a single field result.
Note that there are some countries in the world that are not included in the countries table, which will result in some cities not being labeled as capital cities when in fact they are.
Instructions
Order the resulting field in ascending order.
Can you spot the city/cities that are actually capital cities which this query misses?
*/

        SELECT city.name
        FROM cities AS city
        EXCEPT
        SELECT country.capital
        FROM countries AS country
        ORDER BY name;

Except (2)
Now you will complete the previous query in reverse!
Determine the names of capital cities that are not listed in the cities table.
Instructions
Order by capital in ascending order.
The cities table contains information about 236 of the world's most populous cities. The result of your query may surprise you in terms of the number of capital cities that DO NOT appear in this list!
*/

        SELECT country.capital
        FROM countries AS country
        EXCEPT
        SELECT city.name
        FROM cities AS city
        ORDER BY capital;


Semi-joins and Anti-joins
Semi-join
You are now going to use the concept of a semi-join to identify languages spoken in the Middle East.
Instructions 1/3
Flash back to our Intro to SQL for Data Science course and begin by selecting all country codes in the Middle East as a single field result using SELECT, FROM, and WHERE.

        SELECT * FROM countries
        WHERE region='Middle East'

Instructions 2/3
Comment out the answer to the previous tab by surrounding it in / * and * /. You'll come back to it!
Below the commented code, select only unique languages by name appearing in the languages table.
Order the resulting single field table by name in ascending order.

        SELECT DISTINCT name FROM languages
        ORDER BY name

Instructions 3/3
Now combine the previous two queries into one query:
Add a WHERE IN statement to the SELECT DISTINCT query, and use the commented out query from the first instruction in there. That way, you can determine the unique languages spoken in the Middle East.
Carefully review this result and its code after completing it. It serves as a great example of subqueries, which are the focus of Chapter 4.
*/
        SELECT DISTINCT name FROM languages
        WHERE code IN
            (SELECT code FROM countries
            WHERE region='Middle East')
        ORDER BY name

Let's revisit the code from the previous exercise, which retrieves languages spoken in the Middle East.
        SELECT DISTINCT name
        FROM languages
        WHERE code IN
          (SELECT code
           FROM countries
           WHERE region = 'Middle East')
        ORDER BY name;
Sometimes problems solved with semi-joins can also be solved using an inner join.
        SELECT languages.name AS language
        FROM languages
        INNER JOIN countries
        ON languages.code = countries.code
        WHERE region = 'Middle East'
        ORDER BY language;
This inner join isn't quite right. What is missing from this second code block to get it to match with the correct answer produced by the first block?
*/
DISTINCT


Diagnosing problems using anti-join
Another powerful join in SQL is the anti-join. It is particularly useful in identifying which records are causing an incorrect number of records to appear in join queries.
You will also see another example of a subquery here, as you saw in the first exercise on semi-joins. Your goal is to identify the currencies used in Oceanian countries!
Instructions 1/3
Begin by determining the number of countries in countries that are listed in Oceania using SELECT, FROM, and WHERE.
*/

        SELECT COUNT(*) FROM countries
        WHERE continent = 'Oceania'

/*
Instructions 2/3
Complete an inner join with countries AS c1 on the left and currencies AS c2 on the right to get the different currencies used in the countries of Oceania.
Match ON the code field in the two tables.
Include the country code, country name, and basic_unit AS currency.
Observe query result and make note of how many different countries are listed here.
*/

        SELECT c1.code, c1.name, c2.basic_unit AS currency
        FROM countries AS c1
        INNER JOIN currencies AS c2
        USING (code)
        WHERE continent = 'Oceania';

/*
Instructions 3/3
Note that not all countries in Oceania were listed in the resulting inner join with currencies. Use an anti-join to determine which countries were not included!
Use NOT IN and (SELECT code FROM currencies) as a subquery to get the country code and country name for the Oceanian countries that are not included in the currencies table.
*/
        SELECT c1.code, c1.name
        FROM countries AS c1
        WHERE c1.continent = 'Oceania'
            AND code NOT IN
            (SELECT code 
            FROM currencies);



Set theory challenge
Congratulations! 
Congratulations! You've now made your way to the challenge problem for this third chapter. Your task here will be to incorporate two of UNION/UNION ALL/INTERSECT/EXCEPT to solve a challenge involving three tables.
In addition, you will use a subquery as you have in the last two exercises! This will be great practice as you hop into subqueries more in Chapter 4!

Instructions
Identify the country codes that are included in either economies or currencies but not in populations.
Use that result to determine the names of cities in the countries that match the specification in the previous instruction.
*/

        -- select the city name
        SELECT name
        -- alias the table where city name resides
        FROM cities AS c1
        -- choose only records matching the result of multiple set theory clauses
        WHERE country_code IN
        (
         -- select appropriate field from economies AS e
        SELECT e.code
        FROM economies AS e
        -- get all additional (unique) values of the field from currencies AS c2  
        UNION
        SELECT c2.code
        FROM currencies AS c2
        -- exclude those appearing in populations AS p
        EXCEPT
        SELECT p.country_code
        FROM populations AS p
    );



Subqueries inside WHERE and SELECT clauses

Subquery inside where
You'll now try to figure out which countries had high average life expectancies (at the country level) in 2015.
Instructions 1/2
Begin by calculating the average life expectancy across all countries for 2015.
*/
        SELECT AVG(life_expectancy)
        FROM populations
        WHERE year = 2015;

/*
Instructions 2/2
Recall that you can use SQL to do calculations for you. Suppose we wanted only records that were above 1.15 * 100 in terms of life expectancy for 2015:
        SELECT *
        FROM populations
        WHERE life_expectancy > 1.15 * 100
          AND year = 2015;
Select all fields from populations with records corresponding to larger than 1.15 times the average you calculated 
in the first task for 2015. In other words, change the 100 in the example above with a subquery.
*/
        SELECT *
        FROM populations
        WHERE life_expectancy > 1.15 *
            (SELECT AVG(life_expectancy)
            FROM populations
            WHERE year = 2015)
            AND year = 2015;


Subquery inside where (2)
Use your knowledge of subqueries in WHERE to get the urban area population for only capital cities.
Instructions
Make use of the capital field in the countries table in your subquery.
Select the city name, country code, and urban area population fields.
*/
        SELECT city.name, city.country_code, city.urbanarea_pop
        -- from the cities table
        FROM cities AS city
        -- with city name in the field of capital cities
        WHERE city.name IN
          (SELECT capital
           FROM countries)
        ORDER BY urbanarea_pop DESC;

Subquery inside select
In this exercise, you'll see how some queries can be written using either a join or a subquery.
You have seen previously how to use GROUP BY with aggregate functions and an inner join to get summarized information from multiple tables.
The code given in query.sql selects the top nine countries in terms of number of cities appearing in the cities table. Recall that this corresponds to the most populous cities in the world. Your task will be to convert the commented out code to get the same result as the code shown.
Instructions 1/2
Just Submit Answer here!
*/

        SELECT countries.name AS country, COUNT(*) AS cities_num
        FROM cities
        INNER JOIN countries
        ON countries.code = cities.country_code
        GROUP BY country
        ORDER BY cities_num DESC, country
        LIMIT 9;

/*
Instructions 2/2
Remove the comments around the second query and comment out the first query instead.
Convert the GROUP BY code to use a subquery inside of SELECT, i.e. fill in the blanks to get a result that matches the one given using the GROUP BY code in the first query.
Again, sort the result by cities_num descending and then by country ascending.
*/
        SELECT countries.name AS country,
          (SELECT COUNT(*)
           FROM cities
           WHERE countries.code = cities.country_code) AS cities_num
        FROM countries
        ORDER BY cities_num DESC, country
        LIMIT 9;


Subquery inside from
The last type of subquery you will work with is one inside of FROM.
You will use this to determine the number of languages spoken for each country, identified by the country's local name! (Note this may be different than the name field and is stored in the local_name field.)
Instruction 1/2
Begin by determining for each country code how many languages are listed in the languages table using SELECT, FROM, and GROUP BY.
Alias the aggregated field as lang_num.
*/
        SELECT code, COUNT(name) AS lang_num
        FROM languages
        GROUP BY code;

/*
Instruction 2/2
Include the previous query (aliased as subquery) as a subquery in the FROM clause of a new query.
Select the local name of the country from countries.
Also, select lang_num from subquery.
Make sure to use WHERE appropriately to match code in countries and in subquery.
Sort by lang_num in descending order.
*/
        SELECT local_name, subquery.lang_num
        FROM countries, 
            (SELECT code, COUNT(name) AS lang_num
            FROM languages
            GROUP BY code) as subquery
        WHERE countries.code = subquery.code
        ORDER BY lang_num DESC;



Advanced subquery
You can also nest multiple subqueries to answer even more specific questions.
In this exercise, for each of the six continents listed in 2015, you'll identify which country had the maximum inflation rate (and how high it was) using multiple subqueries. The table result of your query in Task 3 should look something like the following, where anything between < > will be filled in with appropriate values:
+------------+---------------+-------------------+
| name       | continent     | inflation_rate    |
|------------+---------------+-------------------|
| <country1> | North America | <max_inflation1>  |
| <country2> | Africa        | <max_inflation2>  |
| <country3> | Oceania       | <max_inflation3>  |
| <country4> | Europe        | <max_inflation4>  |
| <country5> | South America | <max_inflation5>  |
| <country6> | Asia          | <max_inflation6>  |
+------------+---------------+-------------------+
Again, there are multiple ways to get to this solution using only joins, but the focus here is on showing you an introduction into advanced subqueries.
*/

/*
Instructions 1/3
Create an inner join with countries on the left and economies on the right with USING. Do not alias your tables or columns.
Retrieve the country name, continent, and inflation rate for 2015.
*/
        SELECT name, continent, inflation_rate
        FROM countries 
        INNER JOIN economies
        USING (code)
        WHERE year = 2015;

/*
Instructions 2/3
Determine the maximum inflation rate for each continent in 2015 using the previous query as a subquery called subquery in the FROM clause.
Select the maximum inflation rate AS max_inf grouped by continent.
This will result in the six maximum inflation rates in 2015 for the six continents as one field table. (Don't include continent in the outer SELECT statement.)
*/
SELECT MAX(inflation_rate) AS max_inf
  FROM (
      SELECT name, continent, inflation_rate
      FROM countries
      INNER JOIN economies
      USING (code)
      WHERE year = 2015) AS subquery
GROUP BY continent;

/*
Instructions 3/3
Append the second part's query to the first part's query using WHERE, AND, and IN to obtain the name of the country, its continent, and the maximum inflation rate for each continent in 2015. Revisit the sample output in the assignment text at the beginning of the exercise to see how this matches up.
For the sake of practice, change all joining conditions to use ON instead of USING.
This code works since each of the six maximum inflation rate values occur only once in the 2015 data. Think about whether this particular code involving subqueries would work in cases where there are ties for the maximum inflation rate values.
        */
        SELECT name, continent, inflation_rate
        FROM countries
        INNER JOIN economies
        ON countries.code = economies.code
        WHERE year = 2015
            AND inflation_rate IN (
                SELECT MAX(inflation_rate) AS max_inf
                FROM (
                     SELECT name, continent, inflation_rate
                     FROM countries
                     INNER JOIN economies
                     ON countries.code = economies.code
                     WHERE year = 2015) AS subquery
                GROUP BY continent);



Subquery challenge
Let's test your understanding of the subqueries with a challenge problem! Use a subquery to get 2015 economic data for countries that do not have
gov_form of 'Constitutional Monarchy' or
'Republic' in their gov_form.
Here, gov_form stands for the form of the government for each country. Review the different entries for gov_form in the countries table.
*/

/*
Select the country code, inflation rate, and unemployment rate.
Order by inflation rate ascending.
Do not use table aliasing in this exercise.
*/
        SELECT code, inflation_rate, unemployment_rate
        FROM economies
        WHERE year = 2015 AND code NOT IN
          (SELECT code
           FROM countries
           WHERE (gov_form = 'Constitutional Monarchy' OR gov_form LIKE '%Republic'))
        ORDER BY inflation_rate;


Course review
Final challenge
Welcome to the end of the course! The next three exercises will test your knowledge of the content covered in this course and apply many of the ideas you've seen to difficult problems. Good luck!
Read carefully over the instructions and solve them step-by-step, thinking about how the different clauses work together.
In this exercise, you'll need to get the country names and other 2015 data in the economies table and the countries table for Central American countries with an official language.
Instructions
Select unique country names. Also select the total investment and imports fields.
Use a left join with countries on the left. (An inner join would also work, but please use a left join here.)
Match on code in the two tables AND use a subquery inside of ON to choose the appropriate languages records.
Order by country name ascending.
Use table aliasing but not field aliasing in this exercise.
*/
        -- Select fields
        SELECT DISTINCT c.name, e.total_investment, e.imports
          -- From table (with alias)
          FROM countries AS c
            -- Join with table (with alias)
            LEFT JOIN economies AS e
              -- Match on code
              ON (c.code = e.code AND c.code IN 
              -- and code in Subquery
                (SELECT code 
                    FROM languages
                    WHERE official = 'true'))
          -- Where region and year are correct
           WHERE year = 2015 AND region = 'Central America'
          -- Order by field
            ORDER BY c.name;

        SELECT DISTINCT c.name, e.total_investment, e.imports
        FROM countries AS c
        LEFT JOIN economies AS e
        ON (c.code = e.code AND c.code IN 
            (SELECT code 
            FROM languages
            WHERE official = 'true'))
        WHERE year = 2015 AND region = 'Central America'
        ORDER BY c.name;

Final challenge (2)
Whoofta! That was challenging, huh?
Let's ease up a bit and calculate the average fertility rate for each region in 2015.
*/

/*
Instructions
Include the name of region, its continent, and average fertility rate aliased as avg_fert_rate.
Sort based on avg_fert_rate ascending.
Remember that you'll need to GROUP BY all fields that aren't included in the aggregate function of SELECT.
*/
        -- choose fields
        SELECT region, continent, AVG(fertility_rate) AS avg_fert_rate
        -- left table
        FROM countries AS c
        -- right table
        INNER JOIN populations AS p
        -- join conditions
        ON c.code = p.country_code
        -- specific records matching a condition
        WHERE year = 2015
        -- aggregated for each what?
        GROUP BY region, continent
        -- how should we sort?
        ORDER BY avg_fert_rate;


Final challenge (3)
Welcome to the last challenge problem. By now you're a query warrior! Remember that these challenges are designed to take you to the limit to solidify your SQL knowledge! Take a deep breath and solve this step-by-step.
You are now tasked with determining the top 10 capital cities in Europe and the Americas in terms of a calculated percentage using city_proper_pop and metroarea_pop in cities.
After this exercise you are done with the course! If you enjoyed the material, feel free to send Chester a thank you via Twitter. .
Do not use table aliasing in this exercise.

Instructions
Select the city name, country code, city proper population, and metro area population.
Calculate the percentage of metro area population composed of city proper population for each city in cities, aliased as city_perc.
Focus only on capital cities in Europe and the Americas in a subquery.
Make sure to exclude records with missing data on metro area population.
Order the result by city_perc descending.
Then determine the top 10 capital cities in Europe and the Americas in terms of this city_perc percentage.
*/
        SELECT name, country_code, city_proper_pop, metroarea_pop,  
              city_proper_pop / metroarea_pop * 100 AS city_perc
        FROM cities
        WHERE name IN
          (SELECT capital
           FROM countries
           WHERE (continent = 'Europe'
              OR continent LIKE '%America'))
             AND metroarea_pop IS NOT NULL
        ORDER BY city_perc DESC
        LIMIT 10;

-- Select fields
SELECT ___, ___, ___, ___,  
      -- Calculate city_perc
      ___ / ___ * ___ AS ___
  -- From appropriate table
  FROM ___
  -- Where 
  WHERE ___ IN
    -- Subquery
    (SELECT capital
     FROM ___
     WHERE (___ = ___
        OR ___ LIKE ___))
       AND ___ IS ___ ___
-- Order appropriately
ORDER BY ___ ___
-- Limit amount
___ ___;


















