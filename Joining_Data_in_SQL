An SQL join clause - corresponding to a join operation in relational algebra - 
combines columns from one or more tables in a relational database. 
It creates a set that can be saved as a table or used as it is. 
A JOIN is a means for combining columns from one (self-join) or more tables by using values common to each. 
ANSI-standard SQL specifies five types of JOIN: INNER, LEFT OUTER, RIGHT OUTER, FULL OUTER and CROSS. 
As a special case, a table (base table, view, or joined table) can JOIN to itself in a self-join.

A programmer declares a JOIN statement to identify rows for joining. 
If the evaluated predicate is true, the combined row is then produced in the expected format, a row set or a temporary table.

An inner join requires each row in the two joined tables to have matching column values, 
and is a commonly used join operation in applications but should not be assumed to be the best choice in all situations. 
Inner join creates a new result table by combining column values of two tables (A and B) based upon the join-predicate. 
The query compares each row of A with each row of B to find all pairs of rows that satisfy the join-predicate. 
When the join-predicate is satisfied by matching non-NULL values, 
column values for each matched pair of rows of A and B are combined into a result row.


Inner join
PostgreSQL was mentioned in the slides but you'll find that these joins and the material here applies to different forms
of SQL as well.
Throughout this course, you'll be working with the countries database containing information about the most populous world
cities as well as country-level economic data, population data, and geographic data. 
This countries database also contains information on languages spoken in each country.
You can see the different tables in this database by clicking on the tabs on the bottom right below query.sql. 
Click through them to get a sense for the types of data that each table contains before you continue with the course!
Take note of the fields that appear to be shared across the tables.
Recall from the video the basic syntax for an INNER JOIN, here including all columns in both tables:
    SELECT *
    FROM left_table
    INNER JOIN right_table
    ON left_table.id = right_table.id;
You'll start off with a SELECT statement and then build up to an inner join with the cities and countries tables. 
Let's get to it!
1 Begin by selecting all columns from the cities table.
    SELECT * 
    FROM cities;
2 Inner join the cities table on the left to the countries table on the right, keeping all of the fields in both tables.
You should match the tables on the country_code field in cities and the code field in countries.
Do not alias your tables here or in the next step. Using cities and countries is fine for now.
    SELECT * 
    FROM cities
    INNER JOIN countries
    ON cities.country_code = countries.code;
3 Modify the SELECT statement to keep only the name of the city, the name of the country, 
and the name of the region the country resides in.
Recall from our Intro to SQL for Data Science course that you can alias fields using AS. 
Alias the name of the city AS city and the name of the country AS country.
    SELECT cities.name AS city, countries.name AS country, region
    FROM cities 
    INNER JOIN countries 
    ON cities.country_code = countries.code;


Inner join (2)
Instead of writing the full table name, you can use table aliasing as a shortcut. 
For tables you also use AS to add the alias immediately after the table name with a space. 
Check out the aliasing of cities and countries below.
    SELECT c1.name AS city, c2.name AS country
    FROM cities AS c1
    INNER JOIN countries AS c2
    ON c1.country_code = c2.code;
Notice that to select a field in your query that appears in multiple tables, 
you'll need to identify which table/table alias you're referring to by using a . in your SELECT statement.
You'll now explore a way to get data from both the countries and economies tables to examine the inflation rate for both 2010 and 2015.
Sometimes it's easier to write SQL code out of order: you write the SELECT statement after you've done the JOIN.
Join the tables countries (left) and economies (right) aliasing countries AS c and economies AS e.
Specify the field to match the tables ON.
From this join, SELECT:
c.code, aliased as country_code.
name, year, and inflation_rate, not aliased.
    -- 3. Select fields with aliases
    SELECT c.code AS country_code, name, year, inflation_rate
    FROM countries AS c
    -- 1. Join to economies (alias e)
    INNER JOIN economies AS e
    -- 2. Match on code
    ON c.code = e.code;


Inner join (3)
The ability to combine multiple joins in a single query is a powerful feature of SQL, e.g:
    SELECT *
    FROM left_table
      INNER JOIN right_table
        ON left_table.id = right_table.id
      INNER JOIN another_table
        ON left_table.id = another_table.id;
As you can see here it becomes tedious to continually write long table names in joins. 
This is when it becomes useful to alias each table using the first letter of its name (e.g. countries AS c)! 
It is standard practice to alias in this way and, if you choose to alias tables or are asked to specifically 
for an exercise in this course, you should follow this protocol.
Now, for each country, you want to get the country name, its region, and the fertility rate and unemployment rate
for both 2010 and 2015.
Note that results should work throughout this course with or without table aliasing unless specified differently.
1 Inner join countries (left) and populations (right) on the code and country_code fields respectively.
Alias countries AS c and populations AS p.
Select code, name, and region from countries and also select year and fertility_rate from populations (5 fields in total).
    -- 4. Select fields
    SELECT code, name, region, year, fertility_rate
      -- 1. From countries (alias as c)
    FROM countries AS c
      -- 2. Join with populations (as p)
    INNER JOIN populations AS p
        -- 3. Match on country code
    On c.code = p.country_code
2 Add an additional inner join with economies to your previous query by joining on code.
Include the unemployment_rate column that became available through joining with economies.
Note that year appears in both populations and economies, so you have to explicitly use e.year 
instead of year as you did before.
-- wrong way
    SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
      -- 1. From countries (alias as c)
      FROM countries AS c
      -- 2. Join to populations (as p)
      INNER JOIN populations AS p
        -- 3. Match on country code
        ON c.code = p.country_code
      -- 4. Join to economies (as e)
       INNER JOIN economies AS e
        -- 5. Match on country code
        ON c.code = e.code;
3 Scroll down the query result and take a look at the results for Albania from your previous query. 
Does something seem off to you?
The trouble with doing your last join on c.code = e.code and not also including year is that e.g. the 2010 
value for fertility_rate is also paired with the 2015 value for unemployment_rate.
Fix your previous query: in your last ON clause, use AND to add an additional joining condition. 
In addition to joining on code in c and e, also join on year in e and p.
-- right way
    SELECT c.code, c.name, c.region, p.fertility_rate, e.year, e.unemployment_rate
    FROM countries AS c
    INNER JOIN populations AS p
    ON c.code = p.country_code
    INNER JOIN economies AS e
    ON c.code = e.code
    AND p.year = e.year;


INNER JOIN via USING
Inner join with using
When joining tables with a common field name, e.g.
    SELECT *
    FROM countries
      INNER JOIN economies
        ON countries.code = economies.code
You can use USING as a shortcut:
    SELECT *
    FROM countries
      INNER JOIN economies
        USING(code)
You'll now explore how this can be done with the countries and languages tables.
Inner join countries on the left and languages on the right with USING(code).
Select the fields corresponding to:
country name AS country,
continent name,
language name AS language, and
whether or not the language is official.
Remember to alias your tables using the first letter of their names.
    SELECT c.name AS country, continent, l.name AS language, l.official
    FROM countries AS c
    INNER JOIN languages AS l
    USING (code);


Self-ish joins, just in CASE
Self-join
In this exercise, you'll use the populations table to perform a self-join to calculate the percentage increase 
in population from 2010 to 2015 for each country code!
Since you'll be joining the populations table to itself, you can alias populations as p1 and also populations as p2.
This is good practice whenever you are aliasing and your tables have the same first letter.
Note that you are required to alias the tables with self-joins.
Join populations with itself ON country_code.
Select the country_code from p1 and the size field from both p1 and p2. SQL won't allow same-named fields, 
so alias p1.size as size2010 and p2.size as size2015.
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON  p1.country_code = p2.country_code;
Notice from the result that for each country_code you have four entries laying out all combinations of 2010 and 2015.
Extend the ON in your query to include only those records where the p1.year (2010) matches with 
p2.year - 5 (2015 - 5 = 2010). This will omit the three entries per country_code that you aren't interested in.
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON p1.country_code = p2.country_code
        AND p1.year = p2.year - 5;
As you just saw, you can also use SQL to calculate values like p2.year - 5 for you. 
With two fields like size2010 and size2015, you may want to determine the percentage increase from one field to the next:
With two numeric fields A and B, the percentage growth from A to B can be calculated as (B−A)/A∗100.0.
Add a new field to SELECT, aliased as growth_perc, that calculates the percentage population growth from 2010 to 2015 
for each country, using p2.size and p1.size
    SELECT p1.country_code, 
           p1.size AS size2010,
           p2.size AS size2015,
           ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
    FROM populations AS p1
    INNER JOIN populations AS p2
    ON p1.country_code = p2.country_code
        AND p1.year = p2.year - 5;

Case when and then
Often it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.
You can use CASE with WHEN, THEN, ELSE, and END to define a new grouping field.
Using the countries table, create a new field AS geosize_group that groups the countries into three groups:
If surface_area is greater than 2 million, geosize_group is 'large'.
If surface_area is greater than 350 thousand but not larger than 2 million, geosize_group is 'medium'.
Otherwise, geosize_group is 'small'.
    SELECT name, continent, code, surface_area,
        CASE 
            -- first case
            WHEN surface_area > 2000000 THEN 'large'
            -- second case
            WHEN surface_area > 350000 THEN 'medium'
            -- else clause + end
            ELSE 'small' 
        END AS geosize_group
    FROM countries;

Inner challenge
The table you created with the added geosize_group field has been loaded for you here with the name countries_plus. 
Observe the use of (and the placement of) the INTO command to create this countries_plus table:
    SELECT name, continent, code, surface_area,
        CASE WHEN surface_area > 2000000
                THEN 'large'
           WHEN surface_area > 350000
                THEN 'medium'
           ELSE 'small' END
           AS geosize_group
    INTO countries_plus
    FROM countries;
You will now explore the relationship between the size of a country in terms of surface area and in terms of population using grouping fields created with CASE.
By the end of this exercise, you'll be writing two queries back-to-back in a single script. You got this!
Using the populations table focused only for the year 2015, create a new field AS popsize_group to organize population size 
into
'large' (> 50 million),
'medium' (> 1 million), and
'small' groups.
Select only the country code, population size, and this new popsize_group as fields.
    SELECT country_code, size,
        CASE WHEN size > 50000000 THEN 'large'
            WHEN size > 1000000 THEN 'medium'
            ELSE 'small' END
            AS popsize_group
    FROM populations
    WHERE year = 2015;
Use INTO to save the result of the previous query as pop_plus. You can see an example of this in the countries_plus 
code in the assignment text. Make sure to include a ; at the end of your WHERE clause!
Then, include another query below your first query to display all the records in pop_plus using SELECT * FROM pop_plus; 
so that you generate results and this will display pop_plus in query result.
    SELECT country_code, size,
        CASE WHEN size > 50000000 THEN 'large'
            WHEN size > 1000000 THEN 'medium'
            ELSE 'small' END
            AS popsize_group
    INTO pop_plus
    FROM populations
    WHERE year = 2015;
    SELECT * FROM pop_plus;
Instructions 3/3
Keep the first query intact that creates pop_plus using INTO.
Remove the SELECT * FROM pop_plus; code and instead write a second query to join countries_plus AS c on the left with 
pop_plus AS p on the right matching on the country code fields.
Select the name, continent, geosize_group, and popsize_group fields.
Sort the data based on geosize_group, in ascending order so that large appears on top.
*/
SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
INTO pop_plus
FROM populations
WHERE year = 2015;

SELECT c.name, c.continent, c.geosize_group, p.popsize_group
FROM countries_plus as c
INNER JOIN pop_plus as p
ON c.code = p.country_code
ORDER BY c.geosize_group
























































































